// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.0.0.25 by WSRD Tencent.
// Generated from `item.jce'
// **********************************************************************

package net.digitcube.hadoop.jce.UserExtendInfoLog;

import net.digitcube.protocol.JceDisplayer;
import net.digitcube.protocol.JceInputStream;
import net.digitcube.protocol.JceOutputStream;
import net.digitcube.protocol.JceStruct;
import net.digitcube.protocol.JceUtil;

public final class ItemCount extends JceStruct implements java.lang.Cloneable
{
    public String className()
    {
        return "UserExtendInfoLog.ItemCount";
    }

    public String fullClassName()
    {
        return "net.digitcube.hadoop.jce.UserExtendInfoLog.ItemCount";
    }

    public String itemId = "";

    public String itemType = "";

    public int count = 0;

    public String getItemId()
    {
        return itemId;
    }

    public void  setItemId(String itemId)
    {
        this.itemId = itemId;
    }

    public String getItemType()
    {
        return itemType;
    }

    public void  setItemType(String itemType)
    {
        this.itemType = itemType;
    }

    public int getCount()
    {
        return count;
    }

    public void  setCount(int count)
    {
        this.count = count;
    }

    public ItemCount()
    {
        setItemId(itemId);
        setItemType(itemType);
        setCount(count);
    }

    public ItemCount(String itemId, String itemType, int count)
    {
        setItemId(itemId);
        setItemType(itemType);
        setCount(count);
    }

    public boolean equals(Object o)
    {
        if(o == null)
        {
            return false;
        }

        ItemCount t = (ItemCount) o;
        return (
            JceUtil.equals(itemId, t.itemId) && 
            JceUtil.equals(itemType, t.itemType) && 
            JceUtil.equals(count, t.count) );
    }

    public int hashCode()
    {
        try
        {
            throw new Exception("Need define key first!");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return 0;
    }
    public java.lang.Object clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void writeTo(JceOutputStream _os)
    {
        _os.write(itemId, 0);
        if (null != itemType)
        {
            _os.write(itemType, 1);
        }
        _os.write(count, 2);
    }


    public void readFrom(JceInputStream _is)
    {
        setItemId( _is.readString(0, true));

        setItemType( _is.readString(1, false));

        setCount((int) _is.read(count, 2, false));

    }

    public void display(java.lang.StringBuilder _os, int _level)
    {
        JceDisplayer _ds = new JceDisplayer(_os, _level);
        _ds.display(itemId, "itemId");
        _ds.display(itemType, "itemType");
        _ds.display(count, "count");
    }

}

